{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('claro/classy.node') }}
<article class="flex flex-col items-center"{{ attributes.addClass(classes) }}>
  
  
  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {# {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div> #}
    </footer>
  {% endif %}

  <div class="bg-white max-w-2xl w-[100%] dark:bg-veryDarkBlue pb-8 gap-y-2.5 relative bottom-4 flex flex-col items-center justify-center rounded-md md:flex-row justify-between md:pb-0 md:bottom-9" {{ content_attributes.addClass('node__content') }}>
    <div class="flex flex-col items-center md:flex-row">
      {{ content.field_company_logo }}

      <div class="flex flex-col items-center md:items-start ">
        <div class="font-bold dark:text-white"> {{ content.field_company_name }}</div>
        <h3 class="">{{ content.field_website }}</h3>
      </div>
    </div>
    
    
    <button class="w-[147px] rounded h-12 bg-[#5964e01a] text-violet justify-self-center md:mr-5"> Company Site </button>
  </div>

  <div class="bg-white mb-16 max-w-2xl w-[100%] dark:bg-veryDarkBlue flex flex-col py-8 px-6 mt-6 gap-y-2.5" {{ content_attributes.addClass('node__content') }}>
    <div class="flex flex-col md:flex-row justify-between items-center">
      <div class="flex flex-col gap-3">
        <h3>
          <div class="inline "> {{ content.field_current_date }} </div> . 
          <div class="inline "> {{ content.field_job_type }} </div> 
        </h3>
        
        <h1 class="dark:text-white">{{ content.field_job_name }}</h1>
        <h3 class="text-violet">{{ content.field_country }}</h3>
      </div>
      
      <button class="w-full mt-14 mb-8 md:w-[140px] md:h-12">Apply Now</button>
    </div>
    <h3>{{ content.field_description }}</h3>
    <h1 class="dark:text-white">Requirements</h1>
    <h3>{{ content.field_requirements }}</h3>
    <h1 class="dark:text-white">What You Will Do</h1>
    <h3>{{ content.field_what_you_will_do }}</h3>
  </div>

</article>
<div class="mx-[-24px] flex justify-center bg-white dark:bg-veryDarkBlue">
  <div class="bg-white w-screen max-w-2xl p-6 md:flex items-center justify-between dark:bg-veryDarkBlue ">
    <div class="hidden md:block ">
      <h1 class="dark:text-white">{{ content.field_job_name }}</h1>
      <h3>So Digital Inc.</h3>
    </div>
    <button class="w-full md:w-[140px]">Apply Now</button>
  </div>
</div>


